/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import BD.ConexionBD;
import UpperEssential.UpperEssentialLookAndFeel;
import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import static com.digitalpersona.onetouch.processing.DPFPTemplateStatus.TEMPLATE_STATUS_FAILED;
import static com.digitalpersona.onetouch.processing.DPFPTemplateStatus.TEMPLATE_STATUS_READY;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import com.digitalpersona.onetouch.verification.DPFPVerificationResult;
import java.awt.Image;
import java.awt.print.PrinterException;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;

/**
 *
 * @author Alex
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    
    public Principal() throws UnsupportedLookAndFeelException {
        
//        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        UIManager.setLookAndFeel(new UpperEssentialLookAndFeel("C:\\Users\\Alex\\Documents\\NetBeansProjects\\SSING_2\\Librerias\\SSING4.theme"));
        
        initComponents();
        this.setTitle("Servicio Social Ingenier√≠a");
        this.setLocationRelativeTo(null);
        this.setResizable(false);
//        mostrarPrestamo();
//        this.setExtendedState(Principal.MAXIMIZED_BOTH);
        txtAreaInfoProfesor.setEditable(false);
        txtAreaInfoTrabajador.setEditable(false);
        txtMaterial.setEnabled(false);
        btnPrestamo.setEnabled(false);
        btnRecibo.setEnabled(false);
        optIDU.setSelected(true);
//        btnIdentificar.setVisible(false);
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
 
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                close();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblImagenHuella1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        grupoColegios = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        lblImagenHuella = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lblImagenHuella2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaInfoProfesor = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaInfoTrabajador = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        txtMaterial = new javax.swing.JTextField();
        btnPrestamo = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        optMAESTRIA = new javax.swing.JRadioButton();
        optITX = new javax.swing.JRadioButton();
        optITG = new javax.swing.JRadioButton();
        optICV = new javax.swing.JRadioButton();
        optIGF = new javax.swing.JRadioButton();
        optIME = new javax.swing.JRadioButton();
        optIDU = new javax.swing.JRadioButton();
        optOtro = new javax.swing.JRadioButton();
        optExamenProfesional = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaPrestamos = new javax.swing.JTable();
        btnReset = new javax.swing.JButton();
        btnRecibo = new javax.swing.JButton();
        btnIdentificarProfesor = new javax.swing.JButton();
        btnIdentificarUsuario = new javax.swing.JButton();
        btnImprimirPrestamoActual = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuRegistrar = new javax.swing.JMenu();
        RegistrarProfesor = new javax.swing.JMenu();
        ProfesorUserPass = new javax.swing.JMenuItem();
        ProfesorHuella = new javax.swing.JMenuItem();
        RegistrarUsuario = new javax.swing.JMenu();
        UsuarioUserPass = new javax.swing.JMenuItem();
        UsuarioHuella = new javax.swing.JMenuItem();
        RegistrarMaterial = new javax.swing.JMenu();
        MaterialUserPass = new javax.swing.JMenuItem();
        MaterialHuella = new javax.swing.JMenuItem();
        MenuVer = new javax.swing.JMenu();
        VerRegistroProfesores = new javax.swing.JMenu();
        VerProfesoresUserPass = new javax.swing.JMenuItem();
        VerProfesoresHuella = new javax.swing.JMenuItem();
        VerRegistroUsuarios = new javax.swing.JMenu();
        VerUsuariosUserPass = new javax.swing.JMenuItem();
        VerUsuariosHuella = new javax.swing.JMenuItem();
        VerRegistroMateriales = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        lblImagenHuella1.setBackground(new java.awt.Color(0, 0, 0));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("jLabel2");

        jMenuItem5.setText("Eliminar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem5);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage( new ImageIcon(getClass().getResource("/logotipo/fingerprint10.png")).getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Huella del profesor", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BOTTOM, null, new java.awt.Color(1, 87, 155)));

        lblImagenHuella.setBackground(new java.awt.Color(0, 0, 0));
        lblImagenHuella.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImagenHuella.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/fingerprint32_1.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImagenHuella, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImagenHuella, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Huella del usuario", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BOTTOM, null, new java.awt.Color(1, 87, 155)));

        lblImagenHuella2.setBackground(new java.awt.Color(0, 0, 0));
        lblImagenHuella2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImagenHuella2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/fingerprint32_1.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImagenHuella2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImagenHuella2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nombre del profesor", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 255, 255)));

        txtAreaInfoProfesor.setColumns(20);
        txtAreaInfoProfesor.setRows(5);
        jScrollPane1.setViewportView(txtAreaInfoProfesor);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 308, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 74, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nombre del usuario", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 255, 255)));

        txtAreaInfoTrabajador.setColumns(20);
        txtAreaInfoTrabajador.setRows(5);
        jScrollPane2.setViewportView(txtAreaInfoTrabajador);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
        );

        jLabel5.setText("Equipo para llevar:");

        btnPrestamo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/uploading34.png"))); // NOI18N
        btnPrestamo.setText("Prestar equipo");
        btnPrestamo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrestamoActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Colegio", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BOTTOM, null, new java.awt.Color(255, 255, 255)));

        grupoColegios.add(optMAESTRIA);
        optMAESTRIA.setText("MAESTRIA");

        grupoColegios.add(optITX);
        optITX.setText("ITX");

        grupoColegios.add(optITG);
        optITG.setText("ITG");

        grupoColegios.add(optICV);
        optICV.setText("ICV");

        grupoColegios.add(optIGF);
        optIGF.setText("IGF");

        grupoColegios.add(optIME);
        optIME.setText("IME");
        optIME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optIMEActionPerformed(evt);
            }
        });

        grupoColegios.add(optIDU);
        optIDU.setText("IDU");

        grupoColegios.add(optOtro);
        optOtro.setText("OTRO");
        optOtro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optOtroActionPerformed(evt);
            }
        });

        grupoColegios.add(optExamenProfesional);
        optExamenProfesional.setText("Examen profesional");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optOtro)
                    .addComponent(optIME)
                    .addComponent(optIDU)
                    .addComponent(optIGF)
                    .addComponent(optICV)
                    .addComponent(optITG)
                    .addComponent(optITX)
                    .addComponent(optMAESTRIA))
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(optExamenProfesional)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(optIDU)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(optIME)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(optIGF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(optICV)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(optITG)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(optITX)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(optMAESTRIA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(optOtro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(optExamenProfesional)
                .addGap(0, 7, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(33, 150, 243));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pr√©stamos actuales", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BOTTOM, null, new java.awt.Color(255, 255, 255)));

        tablaPrestamos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaPrestamos.setComponentPopupMenu(jPopupMenu1);
        jScrollPane3.setViewportView(tablaPrestamos);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/reload4.png"))); // NOI18N
        btnReset.setText("Nuevo pr√©stamo");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnRecibo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/down arrow81.png"))); // NOI18N
        btnRecibo.setText("Devolver equipo");
        btnRecibo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReciboActionPerformed(evt);
            }
        });

        btnIdentificarProfesor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/teacher44.png"))); // NOI18N
        btnIdentificarProfesor.setText("Identificar profesor");
        btnIdentificarProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIdentificarProfesorActionPerformed(evt);
            }
        });

        btnIdentificarUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/man13.png"))); // NOI18N
        btnIdentificarUsuario.setText("Identificar usuario");
        btnIdentificarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIdentificarUsuarioActionPerformed(evt);
            }
        });

        btnImprimirPrestamoActual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/studio15.png"))); // NOI18N
        btnImprimirPrestamoActual.setText("Imprimir pr√©stamo");
        btnImprimirPrestamoActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirPrestamoActualActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/students2.png"))); // NOI18N
        jButton1.setText("Sal√≥n");

        jMenuBar1.setBackground(new java.awt.Color(2, 119, 189));
        jMenuBar1.setBorder(null);

        MenuRegistrar.setBackground(new java.awt.Color(1, 87, 155));
        MenuRegistrar.setBorder(null);
        MenuRegistrar.setText("Registrar");

        RegistrarProfesor.setText("Profesor");

        ProfesorUserPass.setText("Ingresar user y pass");
        ProfesorUserPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProfesorUserPassActionPerformed(evt);
            }
        });
        RegistrarProfesor.add(ProfesorUserPass);

        ProfesorHuella.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        ProfesorHuella.setText("Ingresar huella digital");
        ProfesorHuella.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProfesorHuellaActionPerformed(evt);
            }
        });
        RegistrarProfesor.add(ProfesorHuella);

        MenuRegistrar.add(RegistrarProfesor);

        RegistrarUsuario.setText("Usuario");

        UsuarioUserPass.setText("Ingresar user y pass");
        UsuarioUserPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsuarioUserPassActionPerformed(evt);
            }
        });
        RegistrarUsuario.add(UsuarioUserPass);

        UsuarioHuella.setText("Ingresar huella digital");
        UsuarioHuella.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsuarioHuellaActionPerformed(evt);
            }
        });
        RegistrarUsuario.add(UsuarioHuella);

        MenuRegistrar.add(RegistrarUsuario);

        RegistrarMaterial.setText("Material");

        MaterialUserPass.setText("Ingresar user y pass");
        MaterialUserPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaterialUserPassActionPerformed(evt);
            }
        });
        RegistrarMaterial.add(MaterialUserPass);

        MaterialHuella.setText("Ingresar huella digital");
        MaterialHuella.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaterialHuellaActionPerformed(evt);
            }
        });
        RegistrarMaterial.add(MaterialHuella);

        MenuRegistrar.add(RegistrarMaterial);

        jMenuBar1.add(MenuRegistrar);

        MenuVer.setBackground(new java.awt.Color(1, 87, 155));
        MenuVer.setBorder(null);
        MenuVer.setText("Ver");

        VerRegistroProfesores.setText("Registros de profesores");

        VerProfesoresUserPass.setText("Ingresar user y pass");
        VerProfesoresUserPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerProfesoresUserPassActionPerformed(evt);
            }
        });
        VerRegistroProfesores.add(VerProfesoresUserPass);

        VerProfesoresHuella.setText("Ingresar huella digital");
        VerProfesoresHuella.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerProfesoresHuellaActionPerformed(evt);
            }
        });
        VerRegistroProfesores.add(VerProfesoresHuella);

        MenuVer.add(VerRegistroProfesores);

        VerRegistroUsuarios.setText("Registros de usuarios");

        VerUsuariosUserPass.setText("Ingresar user y pass");
        VerUsuariosUserPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerUsuariosUserPassActionPerformed(evt);
            }
        });
        VerRegistroUsuarios.add(VerUsuariosUserPass);

        VerUsuariosHuella.setText("Ingresar huella digital");
        VerUsuariosHuella.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerUsuariosHuellaActionPerformed(evt);
            }
        });
        VerRegistroUsuarios.add(VerUsuariosHuella);

        MenuVer.add(VerRegistroUsuarios);

        VerRegistroMateriales.setText("Registro de materiales");

        jMenuItem3.setText("Ingresar user y pass");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        VerRegistroMateriales.add(jMenuItem3);

        jMenuItem4.setText("Ingresar huella digital");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        VerRegistroMateriales.add(jMenuItem4);

        MenuVer.add(VerRegistroMateriales);

        jMenuItem1.setText("Registros de pr√©stamos");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        MenuVer.add(jMenuItem1);

        jMenuItem2.setText("Registro de recibos");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        MenuVer.add(jMenuItem2);

        jMenuBar1.add(MenuVer);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRecibo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(txtMaterial))
                            .addComponent(btnImprimirPrestamoActual))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPrestamo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(btnIdentificarProfesor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnIdentificarUsuario)
                .addGap(93, 93, 93))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnReset)
                                    .addComponent(btnImprimirPrestamoActual)
                                    .addComponent(jButton1))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(btnPrestamo)
                                    .addComponent(btnRecibo)))
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIdentificarUsuario)
                    .addComponent(btnIdentificarProfesor))
                .addContainerGap())
        );

        jPanel1.getAccessibleContext().setAccessibleName("Huella Profesor");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Varible que permite iniciar el dispositivo de lector de huella conectado
    // con sus distintos metodos.
    private DPFPCapture Lector = DPFPGlobal.getCaptureFactory().createCapture();
    private DPFPCapture Lector2 = DPFPGlobal.getCaptureFactory().createCapture();

    //Varible que permite establecer las capturas de la huellas, para determina sus caracteristicas
    // y poder estimar la creacion de un template de la huella para luego poder guardarla
    private DPFPEnrollment Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();
    private DPFPEnrollment Reclutador2 = DPFPGlobal.getEnrollmentFactory().createEnrollment();

    //Esta variable tambien captura una huella del lector y crea sus caracteristcas para auntetificarla
    // o verificarla con alguna guardada en la BD
    private DPFPVerification Verificador = DPFPGlobal.getVerificationFactory().createVerification();
    private DPFPVerification Verificador2 = DPFPGlobal.getVerificationFactory().createVerification();

    //Variable que para crear el template de la huella luego de que se hallan creado las caracteriticas
    // necesarias de la huella si no ha ocurrido ningun problema
    private DPFPTemplate template;
    public static String TEMPLATE_PROPERTY = "template";
    
    private DPFPTemplate template2;
    public static String TEMPLATE_PROPERTY2 = "template2";
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        Iniciar();

        start();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        stop();
    }//GEN-LAST:event_formWindowClosed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
//        Iniciar();
//        start();
//        EstadoHuellas();
//        Reclutador.clear();
    }//GEN-LAST:event_formWindowActivated

    private void optIMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optIMEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_optIMEActionPerformed

    private void ProfesorUserPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProfesorUserPassActionPerformed
        // TODO add your handling code here:
        stop();
        new IngresoSistemaRegistroProfesores().setVisible(true);
        this.dispose();

    }//GEN-LAST:event_ProfesorUserPassActionPerformed

    private void ProfesorHuellaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProfesorHuellaActionPerformed
        // TODO add your handling code here:
        stop();
        try {
            new IngresoSistemaHuellaRegistroProfesores().setVisible(true);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_ProfesorHuellaActionPerformed

    private void UsuarioUserPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsuarioUserPassActionPerformed
        // TODO add your handling code here:
        stop();
//        new IngresoSistemaRegistro().setVisible(true);
        new IngresoSistemaRegistroUsuarios().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_UsuarioUserPassActionPerformed

    private void UsuarioHuellaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsuarioHuellaActionPerformed
        // TODO add your handling code here:
        stop();
        try {
            new IngresoSistemaHuellaRegistroUsuarios().setVisible(true);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_UsuarioHuellaActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void VerProfesoresUserPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerProfesoresUserPassActionPerformed
        // TODO add your handling code here:
        stop();
        new IngresoSistemaVerProfesores().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_VerProfesoresUserPassActionPerformed

    private void VerProfesoresHuellaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerProfesoresHuellaActionPerformed
        // TODO add your handling code here:
        stop();
        new IngresoSistemaHuellaVerProfesores().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_VerProfesoresHuellaActionPerformed

    private void btnPrestamoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrestamoActionPerformed
        stop();
        stop2();
        try {
            realizarPrestamo();
//            realizarPrestamoActual();
            limpiarJTextField();
            mostrarPrestamoProfesor();
            txtMaterial.grabFocus();
        } catch (SQLException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPrestamoActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        stop();
        stop2();
        new MostrarPrestamos().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        stop();
        stop2();
        this.dispose();
        try {
            new Principal().setVisible(true);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnReciboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReciboActionPerformed
        // TODO add your handling code here:
        stop();
        stop2();
        try {
            realizarRecibo();
            eliminarPrestamoActual();
            mostrarPrestamoProfesor();
            limpiarJTextField();
            txtMaterial.grabFocus();
        } catch (SQLException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnReciboActionPerformed

    private void VerUsuariosUserPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerUsuariosUserPassActionPerformed
        // TODO add your handling code here:
        stop();
        new IngresoSistemaVerUsuarios().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_VerUsuariosUserPassActionPerformed

    private void VerUsuariosHuellaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerUsuariosHuellaActionPerformed
        // TODO add your handling code here:
        stop();
        new IngresoSistemaHuellaVerUsuarios().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_VerUsuariosHuellaActionPerformed

    private void MaterialUserPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaterialUserPassActionPerformed
        // TODO add your handling code here:
        stop();
        new IngresoSistemaRegistroMateriales().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_MaterialUserPassActionPerformed

    private void MaterialHuellaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaterialHuellaActionPerformed
        // TODO add your handling code here:
        stop();
        try {
            new IngresoSistemaHuellaRegistroMateriales().setVisible(true);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_MaterialHuellaActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        stop();
        new IngresoSistemaVerMateriales().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        stop();
        new IngresoSistemaHuellaVerMateriales().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        stop();
        stop2();
        new MostrarRecibos().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:}
        confirmacion();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void btnIdentificarProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIdentificarProfesorActionPerformed
        // TODO add your handling code here:
        String apellidos = JOptionPane.showInputDialog("Introduzca apellidos del profesor","Apellidos a buscar en la base de datos: ");
        identificarProfesor(apellidos);
    }//GEN-LAST:event_btnIdentificarProfesorActionPerformed

    private void btnIdentificarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIdentificarUsuarioActionPerformed
        // TODO add your handling code here:
        String apellidos = JOptionPane.showInputDialog("Introduzca apellidos del usuario","Apellidos a buscar en la base de datos: ");
        identificarUsuario(apellidos);
    }//GEN-LAST:event_btnIdentificarUsuarioActionPerformed

    private void btnImprimirPrestamoActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirPrestamoActualActionPerformed
        // TODO add your handling code here:
        imprimirPrestamoActual();
    }//GEN-LAST:event_btnImprimirPrestamoActualActionPerformed

    private void optOtroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optOtroActionPerformed
        // TODO add your handling code here:
        colegio = JOptionPane.showInputDialog("Especifique el colegio:");
    }//GEN-LAST:event_optOtroActionPerformed

    protected void Iniciar(){
   Lector.addDataListener(new DPFPDataAdapter() {
    @Override public void dataAcquired(final DPFPDataEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    EnviarTexto("Huella Digital capturada.");
    ProcesarCaptura(e.getSample());
    }});}
   });

   Lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
    @Override public void readerConnected(final DPFPReaderStatusEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El Sensor de Huella Digital esta Activado o Conectado");
//    labelConectado.setVisible(true);
//    labelDesconectado.setVisible(false);
    }});}
    @Override public void readerDisconnected(final DPFPReaderStatusEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El Sensor de Huella Digital esta Desactivado o no Conectado");
//    labelConectado.setVisible(false);
//    labelDesconectado.setVisible(true);
    }});}
   });

   Lector.addSensorListener(new DPFPSensorAdapter() {
    @Override public void fingerTouched(final DPFPSensorEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El dedo ha sido colocado sobre el Lector de Huella");
//    labelVerde.setVisible(true);
//    labelRojo.setVisible(false);    
    }});}
    @Override public void fingerGone(final DPFPSensorEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El dedo ha sido quitado del Lector de Huella");
//    labelVerde.setVisible(false);
//    labelRojo.setVisible(true); 
    }});}
   });

   Lector.addErrorListener(new DPFPErrorAdapter(){
    public void errorReader(final DPFPErrorEvent e){
    SwingUtilities.invokeLater(new Runnable() {  public void run() {
    EnviarTexto("Error: "+e.getError());
    }});}
   });
}
    
protected void Iniciar2(){
   Lector2.addDataListener(new DPFPDataAdapter() {
    @Override public void dataAcquired(final DPFPDataEvent e2) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    EnviarTexto("Huella Digital capturada.");
    ProcesarCaptura2(e2.getSample());
    }});}
   });

   Lector2.addReaderStatusListener(new DPFPReaderStatusAdapter() {
    @Override public void readerConnected(final DPFPReaderStatusEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El Sensor de Huella Digital esta Activado o Conectado");
//    labelConectado.setVisible(true);
//    labelDesconectado.setVisible(false);
    }});}
    @Override public void readerDisconnected(final DPFPReaderStatusEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El Sensor de Huella Digital esta Desactivado o no Conectado");
//    labelConectado.setVisible(false);
//    labelDesconectado.setVisible(true);
    }});}
   });

   Lector2.addSensorListener(new DPFPSensorAdapter() {
    @Override public void fingerTouched(final DPFPSensorEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El dedo ha sido colocado sobre el Lector de Huella");
//    labelVerde.setVisible(true);
//    labelRojo.setVisible(false);    
    }});}
    @Override public void fingerGone(final DPFPSensorEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El dedo ha sido quitado del Lector de Huella");
//    labelVerde.setVisible(false);
//    labelRojo.setVisible(true); 
    }});}
   });

   Lector2.addErrorListener(new DPFPErrorAdapter(){
    public void errorReader(final DPFPErrorEvent e){
    SwingUtilities.invokeLater(new Runnable() {  public void run() {
    EnviarTexto("Error: "+e.getError());
    }});}
   });
}    
    
    public void limpiarJTextArea()
{
    //Limpiamos el √°rea de impresi√≥n de los datos.
    txtAreaInfoProfesor.setText("");
}
    public void limpiarJTextField()
    {
        txtMaterial.setText("");
    }
    
    public void limpiarJTextArea2()
    {
        //Limpiamos el √°rea de impresi√≥n de los datos.
        txtAreaInfoTrabajador.setText("");
    }    

 public DPFPFeatureSet featuresinscripcion;
 public DPFPFeatureSet featuresverificacion;
 
 public DPFPFeatureSet featuresinscripcion2;
 public DPFPFeatureSet featuresverificacion2;

 public  void ProcesarCaptura(DPFPSample sample)
 {
 // Procesar la muestra de la huella y crear un conjunto de caracter√≠sticas con el prop√≥sito de inscripci√≥n.
 featuresinscripcion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);

 // Procesar la muestra de la huella y crear un conjunto de caracter√≠sticas con el prop√≥sito de verificacion.
 featuresverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);

 // Comprobar la calidad de la muestra de la huella y lo a√±ade a su reclutador si es bueno
 if (featuresinscripcion != null){
     // Dibuja la huella dactilar capturada.
     Image image = CrearImagenHuella(sample);
     try {
         DibujarHuella(image);
     } catch (SQLException ex) {
         Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
     }
     EnviarTexto("Huella digital capturada");
//     btnIdentificar.setEnabled(true);
 }
     
}
 
 public  void ProcesarCaptura2(DPFPSample sample2)
 {
 // Procesar la muestra de la huella y crear un conjunto de caracter√≠sticas con el prop√≥sito de inscripci√≥n.
 featuresinscripcion2 = extraerCaracteristicas2(sample2, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);

 // Procesar la muestra de la huella y crear un conjunto de caracter√≠sticas con el prop√≥sito de verificacion.
 featuresverificacion2 = extraerCaracteristicas2(sample2, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);

 // Comprobar la calidad de la muestra de la huella y lo a√±ade a su reclutador si es bueno
 if (featuresinscripcion2 != null){
     // Dibuja la huella dactilar capturada.
     Image image2 = CrearImagenHuella2(sample2);
     DibujarHuella2(image2);
     EnviarTexto("Huella digital capturada");
//     btnIdentificar.setEnabled(true);
 }
     
}
 
 public void close(){
        if (JOptionPane.showConfirmDialog(rootPane, "¬øRealmente desea salir del sistema?",
                "Salir del sistema.", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
            System.exit(0);
    }         

 public  DPFPFeatureSet extraerCaracteristicas(DPFPSample sample, DPFPDataPurpose purpose){
     DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
     try {
      return extractor.createFeatureSet(sample, purpose);
     } catch (DPFPImageQualityException e) {
      return null;
     }
}
 
 public  DPFPFeatureSet extraerCaracteristicas2(DPFPSample sample2, DPFPDataPurpose purpose2){
     DPFPFeatureExtraction extractor2 = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
     try {
      return extractor2.createFeatureSet(sample2, purpose2);
     } catch (DPFPImageQualityException e) {
      return null;
     }
}

  public  Image CrearImagenHuella(DPFPSample sample) {
	return DPFPGlobal.getSampleConversionFactory().createImage(sample);
}
  
  public  Image CrearImagenHuella2(DPFPSample sample2) {
	return DPFPGlobal.getSampleConversionFactory().createImage(sample2);
}

  public void DibujarHuella(Image image) throws SQLException {
        lblImagenHuella.setIcon(new ImageIcon(
        image.getScaledInstance(lblImagenHuella.getWidth(), lblImagenHuella.getHeight(), Image.SCALE_DEFAULT)));
        repaint();
        limpiarJTextArea();
        try {
            identificarHuella();
            mostrarPrestamoProfesor();
            System.out.println("Id Profesor: "+idProfesor);
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
 }

 public void DibujarHuella2(Image image2) {
        lblImagenHuella2.setIcon(new ImageIcon(
        image2.getScaledInstance(lblImagenHuella2.getWidth(), lblImagenHuella2.getHeight(), Image.SCALE_DEFAULT)));
        repaint();
        limpiarJTextArea2();
        try {
            identificarHuella2();
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
 } 
  
public void EnviarTexto(String string) {
//        txtAreaPro.append(string + "\n");
}

//Se inicializa el uso del lector de huellas.
public  void start(){
	Lector.startCapture();
	//EnviarTexto("Lector de huella dactilar listo.");
        EnviarTexto("Se necesitan tomar 4 muestras peri√≥dicas de su huella.");
        EnviarTexto("Para elegir la de mejor calidad y guardarla.\n");
//        labelVerde.setVisible(false);
}

public  void start2(){
	Lector2.startCapture();
	//EnviarTexto("Lector de huella dactilar listo.");
        EnviarTexto("Se necesitan tomar 4 muestras peri√≥dicas de su huella.");
        EnviarTexto("Para elegir la de mejor calidad y guardarla.\n");
//        labelVerde.setVisible(false);
}

//Se desactiva el uso del lector de huellas.
public  void stop(){
        Lector.stopCapture();
        EnviarTexto("Lector de huella dactilar desactivado. ");
//        labelVerde.setVisible(false);
//        labelRojo.setVisible(true);
}

public  void stop2(){
        Lector2.stopCapture();
        EnviarTexto("Lector de huella dactilar desactivado. ");
//        labelVerde.setVisible(false);
//        labelRojo.setVisible(true);
}

    public DPFPTemplate getTemplate() {
        return template;
    }
    
    public DPFPTemplate getTemplate2() {
        return template2;
    }

    public void setTemplate(DPFPTemplate template) {
        DPFPTemplate old = this.template;
	this.template = template;
	firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }
    
    public void setTemplate2(DPFPTemplate template2) {
        DPFPTemplate old2 = this.template2;
	this.template2 = template2;
	firePropertyChange(TEMPLATE_PROPERTY2, old2, template2);
    }
    
    /**
     * @param args the command line arguments
     */
    
    //Creamos la instancia 'con' de tipo ConexionBD
    ConexionBD con = new ConexionBD();
    
/**
* Verifica la huella digital actual contra otra en la base de datos
*/
 public void identificarProfesor(String apell) {
    //Establece los valores para la sentencia SQL
    Connection c = con.conectar();
    
    String sql = "SELECT IdProfesor, Nombre, Apellidos FROM Profesor WHERE Apellidos='"+apell+"'";
//    String sql2 = "SELECT IdProfesor, Nombre, Apellidos FROM Profesor WHERE Apellidos='"+apell+"'";
    
    try{
        Statement st = c.createStatement();
        ResultSet rs = st.executeQuery(sql);
//        ResultSet rs1 = st.executeQuery(sql2);

        if(rs.next())
        {
//                   JOptionPane.showMessageDialog(null, "Se ha identificado a " +apell);
//                   System.out.println("Nombreeee");
                    //Inicializamos variable para imprimir en el textArea
                     String imprime = "";
                     //imprime = "Nombre(s): ";
                     imprime = "\n";
                 
                    // while(rs.next())
                     //{
                           imprime+= rs.getString("Nombre")+" ";
                           imprime+= rs.getString("Apellidos");
                           idProfesor = rs.getInt("IdProfesor");
                     //}
//                     System.out.println(imprime);
                     //Mandamos la informaci√≥n de la base de datos al JTextArea
                     txtAreaInfoProfesor.setText(imprime);
                     mostrarPrestamoProfesor();
                     stop();
                     Iniciar2();
                     start2();
        }else
               {
   //                JOptionPane.showMessageDialog(null, "Usuario o contrase√±a incorrecta.");
//                   JOptionPane.showMessageDialog(Principal.this, "No existe coincidencia con ning√∫n profesor.", "Error al identificar al profesor.", JOptionPane.ERROR_MESSAGE);
                   String error = "\nEl profesor no est√° registrado.";
                   txtAreaInfoProfesor.setText(error);
               }
    }catch(SQLException ex){
        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
    }finally{
        con.desconectar();
        }
   }
 
   public void identificarUsuario(String apell)
   {
    //Establece los valores para la sentencia SQL
    Connection c = con.conectar();
    
    String sql = "SELECT IdPrestador, Nombre, Apellidos FROM Usuario WHERE Apellidos='"+apell+"'";
//    String sql2 = "SELECT IdProfesor, Nombre, Apellidos FROM Profesor WHERE Apellidos='"+apell+"'";
    
    try{
        Statement st = c.createStatement();
        ResultSet rs = st.executeQuery(sql);
//        ResultSet rs1 = st.executeQuery(sql2);
        System.out.println("VA A ENTRAR");
        if(rs.next())
        {
//                   JOptionPane.showMessageDialog(null, "Se ha identificado a " +apell);
                   System.out.println("ENTROOOO");
                    //Inicializamos variable para imprimir en el textArea
                     String imprime = "";
                     //imprime = "Nombre(s): ";
                     imprime = "\n";
                 
                    // while(rs.next())
                     //{
                           imprime+= rs.getString("Nombre")+" ";
                           imprime+= rs.getString("Apellidos");
                           idPrestador = rs.getInt("IdPrestador");
                     //}
//                     System.out.println(imprime);
                     //Mandamos la informaci√≥n de la base de datos al JTextArea
                     txtAreaInfoTrabajador.setText(imprime);
                     
                     txtMaterial.setEnabled(true);
                     btnPrestamo.setEnabled(true);
                     btnRecibo.setEnabled(true);
                     txtMaterial.requestFocus();
                     stop2();
        }else
               {
   //                JOptionPane.showMessageDialog(null, "Usuario o contrase√±a incorrecta.");
//                   JOptionPane.showMessageDialog(Principal.this, "No existe coincidencia con ning√∫n profesor.", "Error al identificar al profesor.", JOptionPane.ERROR_MESSAGE);
                   String error = "\nEl usuario no est√° registrado.";
                   txtAreaInfoTrabajador.setText(error);
               }
    }catch(SQLException ex){
        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
    }finally{
        con.desconectar();
        }
   }

 /**
  * Identifica a una persona registrada por medio de su huella digital
  */
  public void identificarHuella() throws IOException{
     try {
       //Establece los valores para la sentencia SQL
       Connection c = con.conectar();

       PreparedStatement identificarStmt;
       identificarStmt = c.prepareStatement("SELECT HuellaProfesor, Nombre, Apellidos FROM Profesor");
       //Query
       ResultSet rs = identificarStmt.executeQuery();
       //Si se encuentra el nombre en la base de datos
       while(rs.next())
       {
        //Lee la plantilla de la base de datos
        byte templateBuffer[] = rs.getBytes("HuellaProfesor");
        String nombre = rs.getString("Nombre");
        String apellidos = rs.getString("Apellidos");
        //Crea una nueva plantilla a partir de la guardada en la base de datos
        DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
        //Envia la plantilla creada al objeto contendor de Template del componente de huella digital
        setTemplate(referenceTemplate);

        // Compara las caracteriticas de la huella recientemente capturda con la
        // alguna plantilla guardada en la base de datos que coincide con ese tipo
        DPFPVerificationResult result = Verificador.verify(featuresverificacion, getTemplate());

        //compara las plantilas (actual vs bd)
        //Si encuentra correspondencia dibuja el mapa
        //e indica el nombre de la persona que coincidi√≥.
            if (result.isVerified())
            {
             //crea la imagen de los datos guardado de las huellas guardadas en la base de datos
             //JOptionPane.showMessageDialog(null, "La huella capturada es de "+nombre,"Verificacion de Huella", JOptionPane.INFORMATION_MESSAGE);
             //cargar();
             //String sql = "SELECT * FROM cliente WHERE nom_cli LIKE '%" +valor+"%";
                 //String sql = "SELECT * FROM somhue WHERE huehuella = "+'"'+referenceTemplate+'"';
                 String sql =  "SELECT * FROM profesor WHERE Nombre = '"+nombre+"' && Apellidos = +'"+apellidos+"'";
//                 btnConsulta.setEnabled(true);
//                 btnHistorial.setEnabled(true);
                 //Creamos nuestro objeto para la tabla que muestra los datos de la BD
                 //model = new DefaultTableModel(null, titulos);

                 ConexionBD cc = new ConexionBD();
                 Connection cn = cc.conectar();

                 Statement st;
//                 limpiarJTextArea();
                 ResultSet rs1 = null;
                 try {
                     st = cn.createStatement();
                     rs1 = st.executeQuery(sql);
                     
                 }catch (SQLException ex) {
                     JOptionPane.showMessageDialog(null, ex);
                 }
                     //Inicializamos variable para imprimir en el textArea
                     String imprime = "";
                     //imprime = "Nombre(s): ";
                     imprime = "\n";
                 
                     while(rs1.next())
                     {
                           imprime+= rs1.getString("Nombre")+" ";
                           imprime+= rs1.getString("Apellidos");
                           idProfesor = rs1.getInt("IdProfesor");
                     }
                     //Mandamos la informaci√≥n de la base de datos al JTextArea
                     txtAreaInfoProfesor.setText(imprime);
                     System.out.println("Id buenooo: " +idProfesor);
                     stop();
                     Iniciar2();
                     start2();
                     return;
         }
       }//fin while
       //Si no encuentra alguna huella correspondiente al nombre lo indica con un mensaje
       //JOptionPane.showMessageDialog(null, "No existe ning√∫n registro que coincida con la huella", "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);
       String error = "\nLa huella no est√° registrada.";
       txtAreaInfoProfesor.setText(error);
       setTemplate(null);
       } catch (SQLException e) {
       //Si ocurre un error lo indica en la consola
       System.err.println("Error al identificar huella dactilar."+e.getMessage());
       }finally{
       con.desconectar();
       }
   }
  
  int idPrestador = 0;
  
  public void identificarHuella2() throws IOException{
     try {
       //Establece los valores para la sentencia SQL
       Connection c = con.conectar();

       PreparedStatement identificarStmt2;
       identificarStmt2 = c.prepareStatement("SELECT HuellaUsuario, Nombre, Apellidos FROM Usuario");
       //Query
       ResultSet rs2 = identificarStmt2.executeQuery();
       //Si se encuentra el nombre en la base de datos
       while(rs2.next())
       {
        //Lee la plantilla de la base de datos
        byte templateBuffer[] = rs2.getBytes("HuellaUsuario");
        String nombre = rs2.getString("Nombre");
        String apellidos = rs2.getString("Apellidos");
        //Crea una nueva plantilla a partir de la guardada en la base de datos
        DPFPTemplate referenceTemplate2 = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
        //Envia la plantilla creada al objeto contendor de Template del componente de huella digital
        setTemplate2(referenceTemplate2);

        // Compara las caracteriticas de la huella recientemente capturda con la
        // alguna plantilla guardada en la base de datos que coincide con ese tipo
        DPFPVerificationResult result2 = Verificador2.verify(featuresverificacion2, getTemplate2());

        //compara las plantilas (actual vs bd)
        //Si encuentra correspondencia dibuja el mapa
        //e indica el nombre de la persona que coincidi√≥.
            if (result2.isVerified())
            {
             //crea la imagen de los datos guardado de las huellas guardadas en la base de datos
             //JOptionPane.showMessageDialog(null, "La huella capturada es de "+nombre,"Verificacion de Huella", JOptionPane.INFORMATION_MESSAGE);
             //cargar();
             //String sql = "SELECT * FROM cliente WHERE nom_cli LIKE '%" +valor+"%";
                 //String sql = "SELECT * FROM somhue WHERE huehuella = "+'"'+referenceTemplate+'"';
                 String sql =  "SELECT * FROM Usuario WHERE Nombre = '"+nombre+"' && Apellidos = +'"+apellidos+"'";
//                 btnConsulta.setEnabled(true);
//                 btnHistorial.setEnabled(true);
                 //Creamos nuestro objeto para la tabla que muestra los datos de la BD
                 //model = new DefaultTableModel(null, titulos);

                 ConexionBD cc = new ConexionBD();
                 Connection cn = cc.conectar();

                 Statement st2;
//                 limpiarJTextArea();
                 ResultSet rs3=null;
                 try {
                     st2 = cn.createStatement();
                     rs3 = st2.executeQuery(sql);
                     } catch (SQLException ex) {
                     JOptionPane.showMessageDialog(null, ex);
                 }
                     //Inicializamos variable para imprimir en el textArea
                     String imprime = "";
                     //imprime = "Nombre(s): ";
                     imprime = "\n";
                 
                     while(rs3.next())
                     {
                           idPrestador = rs3.getInt("IdPrestador");
                           imprime+= rs3.getString("Nombre")+" ";
                           imprime+= rs3.getString("Apellidos");
                     }
                     System.out.println("ID PRESTADOR: " +idPrestador);
                     //Mandamos la informaci√≥n de la base de datos al JTextArea
                     txtAreaInfoTrabajador.setText(imprime);
                     txtMaterial.setEnabled(true);
                     btnPrestamo.setEnabled(true);
                     btnRecibo.setEnabled(true);
                     txtMaterial.requestFocus();
                     stop2();
             return;
         }
       }//fin while
       //Si no encuentra alguna huella correspondiente al nombre lo indica con un mensaje
       //JOptionPane.showMessageDialog(null, "No existe ning√∫n registro que coincida con la huella", "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);
       String error = "\nLa huella no est√° registrada.";
       txtAreaInfoTrabajador.setText(error);
       setTemplate2(null);
       } catch (SQLException e) {
       //Si ocurre un error lo indica en la consola
       System.err.println("Error al identificar huella dactilar."+e.getMessage());
       }finally{
       con.desconectar();
       }
   }
  
  public void mostrarArrayList()
  {
      ArrayList<Integer> ids = new ArrayList();
       int material = Integer.parseInt(txtMaterial.getText());
       int i=0;
       
      for(i=0; i<ids.size(); i++)
       {
           System.out.println("Materiales: "+ids.get(i));
       }
  }
  
  
  int idProfesor;
  int idPrestamo;
//  int idMaterial=0;
  int band=0;
  String colegio;
  String idMaterial;
  
  java.util.Date date = new java.util.Date();
        java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat("dd/MM/yyyy");
        String fechaEntrega = sdf.format(date);
        
        Date now = new Date(System.currentTimeMillis());
        SimpleDateFormat hour = new SimpleDateFormat("HH:mm:ss");
        String horaEntrega = hour.format(now);
  
  public void realizarPrestamo() throws SQLException
  {
//      int idMaterial=0;
       idMaterial = txtMaterial.getText();
      //Establece los valores para la sentencia SQL
       Connection c = con.conectar();
       
       //Apartado para seleccionar el ID del Material.
       PreparedStatement identificarMaterial;
       identificarMaterial = c.prepareStatement("SELECT IdMaterial, Band FROM Material WHERE IdMaterial = '"+idMaterial+"'");
       
       //Query
       ResultSet rs1 = identificarMaterial.executeQuery();
       //Si se encuentra el nombre en la base de datos
       if(rs1.next())
       {
           idMaterial = rs1.getString("IdMaterial");
           band = rs1.getInt("Band");
       }
      System.out.println("\nPr√©stamo de la BD Id Materialessss: "+idMaterial+"\nBandera: "+band);
       
       
       String materiales = (txtMaterial.getText());
      
      
       //Establece los valores para la sentencia SQL
       con.conectar();
       
       //Apartado para seleccionar el ID del Prestador.
       PreparedStatement identificarPrestador;
       identificarPrestador = c.prepareStatement("SELECT IdPrestamoActual FROM PrestamoActual");
       
       //Query
       ResultSet rs2 = identificarPrestador.executeQuery();
       //Si se encuentra el nombre en la base de datos
//       int idPrestador = 0;
       while(rs2.next())
       {
           idPrestamo = rs2.getInt("IdPrestamoActual");
       }
      System.out.println("Id Prestamo actual: " +idPrestamo);
      con.desconectar();
      
        if(optIDU.isSelected())
            colegio = "IDU";
        else if(optIME.isSelected())
            colegio = "IME";
        else if(optIGF.isSelected())
            colegio = "IGF";
        else if(optICV.isSelected())
            colegio = "ICV";
        else if(optITG.isSelected())
            colegio = "ITG";
        else if(optITX.isSelected())
            colegio = "ITX";
        else if(optMAESTRIA.isSelected())
            colegio = "Maestr√≠a";
        else if(optExamenProfesional.isSelected())
            colegio = "Examen Profesional";
//        else if(optOtro.isSelected())
//            colegio = JOptionPane.showInputDialog("Especifique el colegio:");
//            colegio = "";
        
//        if(!optExamenProfesional.isSelected()&&!optIME.isSelected()&&!optIGF.isSelected()&&!optICV.isSelected()&&!optITG.isSelected()&&!optITX.isSelected()&&!optMAESTRIA.isSelected()&&!optExamenProfesional.isSelected()){}
//            colegio = txtOtro.getText().toString();
       
//        try{
        if(band==0)
            JOptionPane.showMessageDialog(null, "El material lo tiene otro profesor.");
        else
        {
            con.conectar();
         
         try (PreparedStatement guardarStmt = c.prepareStatement("INSERT INTO Prestamo(Profesor_IdProfesor, Material_IdMaterial, Usuario_IdPrestador, Fecha_Entrega, Hora_Entrega, Colegio) values(?,?,?,?,?,?)",
             //Con la sig. linea, la clave primaria de la tabla se autogenera al hacer el INSERT
             PreparedStatement.RETURN_GENERATED_KEYS)) 
            {
                guardarStmt.setInt(1,idProfesor);
                guardarStmt.setString(2, materiales);
                guardarStmt.setInt(3, idPrestador);
                guardarStmt.setString(4, fechaEntrega);
                guardarStmt.setString(5, horaEntrega);
                guardarStmt.setString(6, colegio);
//                guardarStmt.setString(7, horaRecibo);
                guardarStmt.executeUpdate();
                realizarPrestamoActual();
                
                JOptionPane.showMessageDialog(Principal.this,"Se ha registrado el pr√©stamo con √©xito. \nPresione Aceptar para continuar.");
                
                con.desconectar();
            }catch(SQLException ex){
                JOptionPane.showMessageDialog(Principal.this,"No se puede registrar el pr√©stamo. \nEl equipo ha sido prestado a otra persona.\n"+ex);
                System.err.println(ex);
            }
        }
        
        if(band==1)
        {    
                    band = 0;
                    String sql = "UPDATE Material SET Band = '"+band+"' WHERE IdMaterial = '"+idMaterial+"'";
                     try {
                         PreparedStatement pst = (PreparedStatement) c.prepareStatement(sql);
                         pst.executeUpdate();
                         System.out.println("PRESTAMO DE LA BD El material ya NO ESTA DISPONIBLE");
             //            cargar("");
                     } catch (Exception e) {
                         System.out.println(e.getMessage());
                     }
         }
  }
  
  public void realizarPrestamoActual() throws SQLException
  {
//      int idMaterial=0;
      //Establece los valores para la sentencia SQL
       Connection c = con.conectar();
       
       idMaterial= txtMaterial.getText();
       
       //Apartado para seleccionar el ID del Material.
       PreparedStatement identificarMaterial;
       identificarMaterial = c.prepareStatement("SELECT IdMaterial, Band FROM Material WHERE IdMaterial = '"+idMaterial+"'");
       
       //Query
       ResultSet rs1 = identificarMaterial.executeQuery();
       //Si se encuentra el nombre en la base de datos
       while(rs1.next())
       {
           idMaterial = rs1.getString("IdMaterial");
           band = rs1.getInt("Band");
       }
      System.out.println("\nPr√©stamo ACTUAL Id Materiales: "+idMaterial+"\nBandera: "+band);
//
//      
       String materiales = (txtMaterial.getText());
      
       
       //Establece los valores para la sentencia SQL
//       con.conectar();
       
       //Apartado para seleccionar el ID del Prestador.
//       PreparedStatement identificarPrestador;
//       identificarPrestador = c.prepareStatement("SELECT IdPrestamo FROM Prestamo");
//       
//       //Query
//       ResultSet rs2 = identificarPrestador.executeQuery();
//       //Si se encuentra el nombre en la base de datos
////       int idPrestador = 0;
//       while(rs2.next())
//       {
//           idPrestamo = rs2.getInt("IdPrestamo");
//       }
//      System.out.println("Id Prestamo en BD: " +idPrestamo);
//      con.desconectar();
       
        if(optIDU.isSelected())
            colegio = "IDU";
        else if(optIME.isSelected())
            colegio = "IME";
        else if(optIGF.isSelected())
            colegio = "IGF";
        else if(optICV.isSelected())
            colegio = "ICV";
        else if(optITG.isSelected())
            colegio = "ITG";
        else if(optITX.isSelected())
            colegio = "ITX";
        else if(optMAESTRIA.isSelected())
            colegio = "Maestr√≠a";
        else if(optExamenProfesional.isSelected())
            colegio = "Examen Profesional";
        
        try (PreparedStatement guardarStmt = c.prepareStatement("INSERT INTO PrestamoActual(Profesor_IdProfesor, Material_IdMaterial, Usuario_IdPrestador, Fecha_Entrega, Hora_Entrega, Colegio) values(?,?,?,?,?,?)",
                        //Con la sig. linea, la clave primaria de la tabla se autogenera al hacer el INSERT
                        PreparedStatement.RETURN_GENERATED_KEYS)) 
                       {
                           guardarStmt.setInt(1,idProfesor);
                           guardarStmt.setString(2, materiales);
                           guardarStmt.setInt(3, idPrestador);
                           guardarStmt.setString(4, fechaEntrega);
                           guardarStmt.setString(5, horaEntrega);
                           guardarStmt.setString(6, colegio);
           //                guardarStmt.setString(7, horaRecibo);
                           guardarStmt.executeUpdate();

           //                JOptionPane.showMessageDialog(Principal.this,"Se ha registrado el pr√©stamo con √©xito. \nPresione Aceptar para continuar.");

                           con.desconectar();
                       }catch(SQLException ex){
                           JOptionPane.showMessageDialog(Principal.this,"No se puede registrar el pr√©stamo. \nEl equipo ha sido prestado a otra persona.\n"+ex);
                           System.err.println(ex);
                       }
        
//        if(band==1)
//        {    
//                    band = 0;
//                    String sql = "UPDATE Material SET Band = '"+band+"' WHERE IdMaterial = '"+idMaterial+"'";
//                     try {
//                         PreparedStatement pst = (PreparedStatement) c.prepareStatement(sql);
//                         pst.executeUpdate();
//                         System.out.println("PRESTAMO ACTUAL El material ya NO ESTA DISPONIBLE");
//             //            cargar("");
//                     } catch (Exception e) {
//                         System.out.println(e.getMessage());
//                     }
//        }//JOptionPane.showMessageDialog(null, "El material lo tiene otro profesor.");
//        else if(optOtro.isSelected())
//            colegio = JOptionPane.showInputDialog("Especifique el colegio:");
        
//        if(!optExamenProfesional.isSelected()&&!optIME.isSelected()&&!optIGF.isSelected()&&!optICV.isSelected()&&!optITG.isSelected()&&!optITX.isSelected()&&!optMAESTRIA.isSelected()&&!optExamenProfesional.isSelected()){}
//            colegio = txtOtro.getText().toString();
       
        java.util.Date date = new java.util.Date();
        java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat("dd/MM/yyyy");
        String fechaEntrega = sdf.format(date);
        
        Date now = new Date(System.currentTimeMillis());
        SimpleDateFormat hour = new SimpleDateFormat("HH:mm:ss");
        String horaEntrega = hour.format(now);
//        try{
  }
  
  public void imprimirPrestamoActual()
  {
      try {
            MessageFormat headerFormat = new MessageFormat("Pr√©stamo del profesor.\n\n");
            MessageFormat footerFormat = new MessageFormat("Facultad de Ingenier√≠a, Laboratorio de C√≥mputo. Fecha: " +fechaEntrega+" Hora: "+horaEntrega);
            //tablaDatos.print(JTable.PrintMode.NORMAL, headerFormat, footerFormat);
            //tablaDatos.print(JTable.PrintMode.valueOf(lastid));
            tablaPrestamos.print(JTable.PrintMode.NORMAL, headerFormat, footerFormat, rootPaneCheckingEnabled, null, rootPaneCheckingEnabled);
        } catch (PrinterException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
  }
  
  public void eliminarPrestamoActual() throws SQLException
  {
//      int idMaterial=0;
      
//      String materiales = (txtMaterial.getText());
      
      //Establece los valores para la sentencia SQL
       Connection c = con.conectar();
       
       //Apartado para seleccionar el ID del Material.
//       PreparedStatement identificarMaterial;
//       identificarMaterial = c.prepareStatement("SELECT IdMaterial, Band FROM Material WHERE IdMaterial = '"+materiales+"'");
       
       //Query
//       ResultSet rs1 = identificarMaterial.executeQuery();
//       //Si se encuentra el nombre en la base de datos
//       while(rs1.next())
//       {
//           idMaterial = rs1.getInt("IdMaterial");
//           band = rs1.getInt("Band");
//       }
      System.out.println("\nEliminar Prestamo Id Materiales: "+idMaterial+"\nBandera: "+band);
       
       //Establece los valores para la sentencia SQL
       con.conectar();
      
      String sql = "DELETE FROM PrestamoActual WHERE Material_IdMaterial = '"+idMaterial+"'";
        try {
            PreparedStatement pst = (PreparedStatement) c.prepareStatement(sql);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Se ha devuelto el equipo con √©xito");
//            cargar("");
        } catch (SQLException ex) {
            Logger.getLogger(VerRegistrosProfesores.class.getName()).log(Level.SEVERE, null, ex);
        }
  }
  
  String idPrestamoActual;
  public void eliminarActual()
    {
        //Establece los valores para la sentencia SQL
        Connection c = con.conectar();
        
        int fila = tablaPrestamos.getSelectedRow();
        if(fila>=0){
            idPrestamoActual = tablaPrestamos.getValueAt(fila, 0).toString();
            System.out.println("ID PARA ELIMINAR ACTUAL: " +idPrestamoActual);
            String sql = "DELETE FROM PrestamoActual WHERE  IdPrestamoActual = '"+idPrestamoActual+"'";
            try {
                PreparedStatement pst = (PreparedStatement) c.prepareStatement(sql);
                pst.executeUpdate();
                mostrarPrestamoProfesor();
            } catch (SQLException ex) {
                Logger.getLogger(VerRegistrosProfesores.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else
            JOptionPane.showMessageDialog(null, "Debe elegir el elemento de la tabla que desea modificar.", "No se seleccion√≥ ning√∫n elemento.", JOptionPane.ERROR_MESSAGE);
    }
  
  public void eliminarBD()
    {
        //Establece los valores para la sentencia SQL
        Connection c = con.conectar();
        
//        int fila = tablaPrestamos.getSelectedRow();
//        if(fila>=0){
//            String idPrestamoBD = tablaPrestamos.getValueAt(fila, 0).toString();
            System.out.println("ID PARA ELIMINAR DE LA BD: " +idPrestamoActual);
            String sql = "DELETE FROM Prestamo WHERE  IdPrestamo = '"+idPrestamoActual+"'";
            try {
                PreparedStatement pst = (PreparedStatement) c.prepareStatement(sql);
                pst.executeUpdate();
//                mostrarPrestamoProfesor();
            } catch (SQLException ex) {
                Logger.getLogger(VerRegistrosProfesores.class.getName()).log(Level.SEVERE, null, ex);
            }
            
//        }else
//            JOptionPane.showMessageDialog(null, "Debe elegir el elemento de la tabla que desea modificar.", "No se seleccion√≥ ning√∫n elemento.", JOptionPane.ERROR_MESSAGE);
    }
    
    public void confirmacion(){
        if (JOptionPane.showConfirmDialog(rootPane, "¬øRealmente desea eliminar este elemento?",
                "Confirmaci√≥n para borrar profesor", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
            eliminarActual();
            eliminarBD();
    } 
  
  public void realizarRecibo() throws SQLException
  {
       idMaterial = (txtMaterial.getText());
      
      //Establece los valores para la sentencia SQL
       Connection c = con.conectar();
       
       //Apartado para seleccionar el ID del Material.
       PreparedStatement identificarMaterial;
       identificarMaterial = c.prepareStatement("SELECT IdMaterial, Band FROM Material WHERE IdMaterial = '"+idMaterial+"'");
       
       //Query
       ResultSet rs1 = identificarMaterial.executeQuery();
       System.out.println("++++++++++ "+rs1);
       //Si se encuentra el nombre en la base de datos
       while(rs1.next())
       {
           idMaterial = rs1.getString("IdMaterial");
           band = rs1.getInt("Band");
//           System.out.println("IDMATERIAL: "+ idMaterial);
       }
      System.out.println("\nREALIZAR RECIBO Id Materiales: "+idMaterial+"\nBandera: "+band);
      
      String materiales = (txtMaterial.getText());
      
       //Establece los valores para la sentencia SQL
       con.conectar();
      
        java.util.Date date = new java.util.Date();
        java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat("dd/MM/yyyy");
        String fechaRecibo = sdf.format(date);
        
        Date now = new Date(System.currentTimeMillis());
        SimpleDateFormat hour = new SimpleDateFormat("HH:mm:ss");
        String horaRecibo = hour.format(now);
        
        if(band==0)
        {    
                    band = 1;
                    String sql = "UPDATE Material SET Band = '"+band+"' WHERE IdMaterial = '"+idMaterial+"'";
                    
                    try (PreparedStatement guardarStmt = c.prepareStatement("INSERT INTO Recibo(Profesor_IdProfesor, Material_IdMaterial, Usuario_IdUsuario, Fecha_Recibo, Hora_Recibo) values(?,?,?,?,?)",
                        //Con la sig. linea, la clave primaria de la tabla se autogenera al hacer el INSERT
                        PreparedStatement.RETURN_GENERATED_KEYS)) 
                       {
                           guardarStmt.setInt(1,idProfesor);
                           guardarStmt.setString(2, materiales);
                           guardarStmt.setInt(3, idPrestador);
                           guardarStmt.setString(4, fechaRecibo);
                           guardarStmt.setString(5, horaRecibo);
           //                guardarStmt.setString(6, colegio);
           //                guardarStmt.setString(7, horaRecibo);
                           guardarStmt.executeUpdate();

                           JOptionPane.showMessageDialog(Principal.this,"Se ha registrado el recibo con √©xito. \nPresione Aceptar para continuar.");

                           con.desconectar();
                        }catch(SQLException ex){
                            JOptionPane.showMessageDialog(Principal.this,"No se puede registrar el recibo.\n"+ex);
                            System.err.println(ex);
                        }
                    
                     try {
                         PreparedStatement pst = (PreparedStatement) c.prepareStatement(sql);
                         pst.executeUpdate();
                         System.out.println("El material YA ESTA DISPONIBLE");
             //            cargar("");
                     } catch (Exception e) {
                         System.out.println(e.getMessage());
                     }
        }JOptionPane.showMessageDialog(null,"Ya se ha regresado este material.");
       //Apartado para seleccionar la BAND del Material.
//       PreparedStatement identificarMaterial;
//       identificarMaterial = c.prepareStatement("SELECT Material.IdMaterial as material, Material.Band as band FROM Prestamo INNER JOIN Profesor ON Material.Material_IdMaterial = Material.IdMaterial INNER JOIN Material ON Material.Material_IdMaterial = Material.IdMaterial WHERE Material.Material_IdMaterial = '"+(idMaterial)+"'");
       
       //Query
//       ResultSet rs1 = identificarMaterial.executeQuery();
       //Si se encuentra el nombre en la base de datos
//       while(rs1.next())
//       {
//           idMaterial = rs1.getInt("material");
//           band = rs1.getBoolean("band");
//       }
//      System.out.println("Id material: "+idMaterial+"\nBandera: "+band);
       
  }
  
  public void mostrarPrestamoProfesor() throws SQLException
  {
      //Establece los valores para la sentencia SQL
//       Connection c = con.conectar();
      //Creamos la instancia 'con' de tipo ConexionBD
        ConexionBD cc = new ConexionBD();
        Connection cn = cc.conectar();
       
       //Encabezados de la tabla
        String [] titulos = {"","Profesor", "Material", "Usuario"};
        String [] registros = new String[4];
       
//       String sql = "SELECT Profesor.Nombre,Material.Nombre,Usuario.Nombre FROM Prestamo "
//               + "INNER JOIN Profesor ON Prestamo.Profesor_IdProfesor = Profesor.IdProfesor"
//               + "INNER JOIN Material ON Prestamo.Material_IdMaterial = Material.IdMaterial"
//               + "INNER JOIN Usuario ON Prestamo.Usuario_IdPrestador = Usuario.IdPrestador";
//       
        String sql = "SELECT IdPrestamoActual, Profesor.Nombre AS profe, Material.Nombre AS material, Usuario.Nombre AS prestador FROM PrestamoActual INNER JOIN Profesor ON PrestamoActual.Profesor_IdProfesor = Profesor.IdProfesor INNER JOIN Material ON PrestamoActual.Material_IdMaterial = Material.IdMaterial INNER JOIN Usuario ON PrestamoActual.Usuario_IdPrestador = Usuario.IdPrestador WHERE PrestamoActual.Profesor_IdProfesor = '"+(idProfesor)+"'";
       
        //Creamos nuestro objeto para la tabla que muestra los datos de la BD
        DefaultTableModel model;
        model = new DefaultTableModel(null, titulos);
        
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            
            while(rs.next())
            {
                registros[0] = rs.getString("IdPrestamoActual");
                registros[1] = rs.getString("profe");
                registros[2] = rs.getString("material");
                registros[3] = rs.getString("prestador");
                model.addRow(registros);
            }
            tablaPrestamos.setModel(model);
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
            System.out.println(ex);
        }
  }
  
  
//  public static void main(String args[]) throws UnsupportedLookAndFeelException {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
////        try {
////            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//////            javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
////            
////        } catch (ClassNotFoundException ex) {
////            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        } catch (InstantiationException ex) {
////            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        } catch (IllegalAccessException ex) {
////            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
////            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        }
//            UIManager.setLookAndFeel(new UpperEssentialLookAndFeel("C:\\Users\\Alex\\Documents\\NetBeansProjects\\SSING_2\\Librerias\\SSING4.theme"));
////              UIManager.setLookAndFeel(new UpperEssentialLookAndFeel());
//      
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                try {
//                    new Principal().setVisible(true);
//                } catch (UnsupportedLookAndFeelException ex) {
//                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MaterialHuella;
    private javax.swing.JMenuItem MaterialUserPass;
    private javax.swing.JMenu MenuRegistrar;
    private javax.swing.JMenu MenuVer;
    private javax.swing.JMenuItem ProfesorHuella;
    private javax.swing.JMenuItem ProfesorUserPass;
    private javax.swing.JMenu RegistrarMaterial;
    private javax.swing.JMenu RegistrarProfesor;
    private javax.swing.JMenu RegistrarUsuario;
    private javax.swing.JMenuItem UsuarioHuella;
    private javax.swing.JMenuItem UsuarioUserPass;
    private javax.swing.JMenuItem VerProfesoresHuella;
    private javax.swing.JMenuItem VerProfesoresUserPass;
    private javax.swing.JMenu VerRegistroMateriales;
    private javax.swing.JMenu VerRegistroProfesores;
    private javax.swing.JMenu VerRegistroUsuarios;
    private javax.swing.JMenuItem VerUsuariosHuella;
    private javax.swing.JMenuItem VerUsuariosUserPass;
    private javax.swing.JButton btnIdentificarProfesor;
    private javax.swing.JButton btnIdentificarUsuario;
    private javax.swing.JButton btnImprimirPrestamoActual;
    private javax.swing.JButton btnPrestamo;
    private javax.swing.JButton btnRecibo;
    private javax.swing.JButton btnReset;
    private javax.swing.ButtonGroup grupoColegios;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblImagenHuella;
    private javax.swing.JLabel lblImagenHuella1;
    private javax.swing.JLabel lblImagenHuella2;
    private javax.swing.JRadioButton optExamenProfesional;
    private javax.swing.JRadioButton optICV;
    private javax.swing.JRadioButton optIDU;
    private javax.swing.JRadioButton optIGF;
    private javax.swing.JRadioButton optIME;
    private javax.swing.JRadioButton optITG;
    private javax.swing.JRadioButton optITX;
    private javax.swing.JRadioButton optMAESTRIA;
    private javax.swing.JRadioButton optOtro;
    private javax.swing.JTable tablaPrestamos;
    private javax.swing.JTextArea txtAreaInfoProfesor;
    private javax.swing.JTextArea txtAreaInfoTrabajador;
    private javax.swing.JTextField txtMaterial;
    // End of variables declaration//GEN-END:variables
}
