
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import BD.ConexionBD;
import UpperEssential.UpperEssentialLookAndFeel;
import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import static com.digitalpersona.onetouch.processing.DPFPTemplateStatus.TEMPLATE_STATUS_FAILED;
import static com.digitalpersona.onetouch.processing.DPFPTemplateStatus.TEMPLATE_STATUS_READY;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import com.digitalpersona.onetouch.verification.DPFPVerificationResult;
import java.awt.Image;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alex
 */
public class RegistroProfesor extends javax.swing.JFrame {
    
    //Principal ventanaPrincipal = new Principal();

    String nombre = "", apellidos = "";
    /**
     * Creates new form RegistroProfesor
     */
    public RegistroProfesor() throws UnsupportedLookAndFeelException {
        
//        UIManager.setLookAndFeel(new UpperEssentialLookAndFeel("C:\\Users\\Alex\\Documents\\NetBeansProjects\\SSING_2\\Librerias\\123.theme"));
        
        initComponents();
        this.setTitle("Registro de Profesor");
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        //btnGuardar.setEnabled(true);
        //txtNombre.setEnabled(false);
        //txtApellidos.setEnabled(false);
        txtArea.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblImagenHuella = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtApellidos = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        labelListo = new javax.swing.JLabel();
        labelCapturando3 = new javax.swing.JLabel();
        labelCapturando2 = new javax.swing.JLabel();
        labelCapturando1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        labelDesconectado = new javax.swing.JLabel();
        labelConectado = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconImage( new ImageIcon(getClass().getResource("/logotipo/fingerprint10.png")).getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Muestra de la huella"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImagenHuella, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImagenHuella, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
        );

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel5.setText("Por favor, introduzca los datos para el registro del profesor.");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Informaci√≥n de la captura"));

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 364, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 81, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Registro de datos"));

        jLabel3.setText("Nombre(s):");

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        jLabel4.setText("Apellidos:");

        txtApellidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApellidosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(122, Short.MAX_VALUE)
                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel4))
                    .addGap(58, 58, 58)
                    .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addComponent(jLabel3)
                    .addGap(18, 18, 18)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(21, Short.MAX_VALUE)))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Huellas capturadas"));

        labelListo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/fingerprint21.png"))); // NOI18N

        labelCapturando3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/capturando1.png"))); // NOI18N

        labelCapturando2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/capturando1.png"))); // NOI18N

        labelCapturando1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/capturando1.png"))); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelCapturando1)
                .addGap(18, 18, 18)
                .addComponent(labelCapturando2)
                .addGap(18, 18, 18)
                .addComponent(labelCapturando3)
                .addGap(18, 18, 18)
                .addComponent(labelListo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCapturando1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelCapturando2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelCapturando3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelListo, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Estado del lector"));

        labelDesconectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/link64.png"))); // NOI18N

        labelConectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/link68.png"))); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(13, 13, 13)
                    .addComponent(labelConectado)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(labelDesconectado)
                    .addContainerGap(13, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(5, 5, 5)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(labelConectado)
                        .addComponent(labelDesconectado))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jButton1.setText("SinHuella");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGuardar)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancelar)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(197, 197, 197))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGuardar)
                            .addComponent(btnCancelar)
                            .addComponent(jButton1))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
        stop();
        Reclutador.clear();
        lblImagenHuella.setIcon(null);
        limpiarTextFields();
        txtNombre.setEnabled(false);
        txtApellidos.setEnabled(false);
        try {
            new Principal().setVisible(true);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(VerRegistrosProfesores.class.getName()).log(Level.SEVERE, null, ex);
        }
//        Reclutador.clear();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        guardarHuella1();
        Reclutador.clear();
        lblImagenHuella.setIcon(null);
        //start();
        limpiarTextFields();
        txtNombre.setEnabled(false);
        txtApellidos.setEnabled(false);
        this.dispose();
        try {
            new Principal().show(true);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(RegistroProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        Iniciar();
	start();
        EstadoHuellas();
        EnviarTexto("Se necesitan tomar 4 muestras de su huella.");
        EnviarTexto("Para elegir la de mejor calidad y guardarla.\n");
        Reclutador.clear();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
//        Iniciar();
//	start();
//        EstadoHuellas();
//        Reclutador.clear();
    }//GEN-LAST:event_formWindowActivated

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
        txtNombre.transferFocus();
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtApellidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApellidosActionPerformed
        // TODO add your handling code here:
        txtApellidos.transferFocus();
    }//GEN-LAST:event_txtApellidosActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        try {
            new Principal().setVisible(true);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(VerRegistrosProfesores.class.getName()).log(Level.SEVERE, null, ex);
        }
        stop();
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        guardarSinHuella();
    }//GEN-LAST:event_jButton1ActionPerformed

    
//Varible que permite iniciar el dispositivo de lector de huella conectado
// con sus distintos metodos.
private DPFPCapture Lector = DPFPGlobal.getCaptureFactory().createCapture();

//Varible que permite establecer las capturas de la huellas, para determina sus caracteristicas
// y poder estimar la creacion de un template de la huella para luego poder guardarla
private DPFPEnrollment Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();

//Esta variable tambien captura una huella del lector y crea sus caracteristcas para auntetificarla
// o verificarla con alguna guardada en la BD
private DPFPVerification Verificador = DPFPGlobal.getVerificationFactory().createVerification();

//Variable que para crear el template de la huella luego de que se hallan creado las caracteriticas
// necesarias de la huella si no ha ocurrido ningun problema
private DPFPTemplate template;
public static String TEMPLATE_PROPERTY = "template";

protected void Iniciar(){
   Lector.addDataListener(new DPFPDataAdapter() {
    @Override public void dataAcquired(final DPFPDataEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    EnviarTexto("Huella Digital capturada.");
    ProcesarCaptura(e.getSample());
    }});}
   });

   Lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
    @Override public void readerConnected(final DPFPReaderStatusEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El Sensor de Huella Digital esta Activado o Conectado");
    labelDesconectado.setVisible(false);
    labelConectado.setVisible(true);
    }});}
    @Override public void readerDisconnected(final DPFPReaderStatusEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El Sensor de Huella Digital esta Desactivado o no Conectado");
    labelDesconectado.setVisible(true);
    labelConectado.setVisible(false);
    }});}
   });

   Lector.addSensorListener(new DPFPSensorAdapter() {
    @Override public void fingerTouched(final DPFPSensorEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El dedo ha sido colocado sobre el Lector de Huella");
//    labelVerde.setVisible(true);
//    labelRojo.setVisible(false);    
    }});}
    @Override public void fingerGone(final DPFPSensorEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El dedo ha sido quitado del Lector de Huella");
//    labelVerde.setVisible(false);
//    labelRojo.setVisible(true); 
    }});}
   });

   Lector.addErrorListener(new DPFPErrorAdapter(){
    public void errorReader(final DPFPErrorEvent e){
    SwingUtilities.invokeLater(new Runnable() {  public void run() {
    EnviarTexto("Error: "+e.getError());
    }});}
   });
}

public void limpiarJTextArea()
{
    //Limpiamos el √°rea de impresi√≥n de los datos.
//    txtAreaInfoPaciente.setText("");
}

 public DPFPFeatureSet featuresinscripcion;
 public DPFPFeatureSet featuresverificacion;

 public  void ProcesarCaptura(DPFPSample sample)
 {
 // Procesar la muestra de la huella y crear un conjunto de caracter√≠sticas con el prop√≥sito de inscripci√≥n.
 featuresinscripcion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);

 // Procesar la muestra de la huella y crear un conjunto de caracter√≠sticas con el prop√≥sito de verificacion.
 featuresverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);

 // Comprobar la calidad de la muestra de la huella y lo a√±ade a su reclutador si es bueno
 if (featuresinscripcion != null)
     try{
     System.out.println("Las Caracteristicas de la Huella han sido creada");
     Reclutador.addFeatures(featuresinscripcion);// Agregar las caracteristicas de la huella a la plantilla a crear

     // Dibuja la huella dactilar capturada.
     Image image = CrearImagenHuella(sample);
     DibujarHuella(image);
     
//     btnVerificar.setEnabled(true);
//     btnIdentificar.setEnabled(true);

     }catch (DPFPImageQualityException ex) {
     System.err.println("Error: "+ex.getMessage());
     }

     finally {
     EstadoHuellas();
     // Comprueba si la plantilla se ha creado.
	switch(Reclutador.getTemplateStatus())
        {
            case TEMPLATE_STATUS_READY:	// informe de √©xito y detiene  la captura de huellas
	    stop();
            setTemplate(Reclutador.getTemplate());
	    //EnviarTexto("La Plantilla de la Huella Dactilar ha sido creada.");
            //EnviarTexto("Ya puede Guardarla.");
            EnviarTexto("Ya puede Guardar la Huella, se ha creado con √©xito la Plantilla.");
//	    btnIdentificar.setEnabled(false);
//            btnVerificar.setEnabled(false);
            
            // Cuando tenemos los 4 templates de la huella, activamos la etiqueta de huella Lista
            // y desactivamos las huellas del proceso de captura.
            labelListo.setEnabled(true);
            labelCapturando1.setEnabled(false);
            labelCapturando2.setEnabled(false);
            labelCapturando3.setEnabled(false);
            txtNombre.setEnabled(true);
            txtNombre.grabFocus();
            txtNombre.transferFocus();
            txtApellidos.setEnabled(true);
            txtApellidos.transferFocus();
            btnGuardar.setEnabled(true);
//            btnGuardar.grabFocus();
            break;

	    case TEMPLATE_STATUS_FAILED: // informe de fallas y reiniciar la captura de huellas
	    Reclutador.clear();
            stop();
	    EstadoHuellas();
	    setTemplate(null);
	    JOptionPane.showMessageDialog(RegistroProfesor.this, "La Plantilla de la huella no pudo ser creada correctamente. \nRepita el Proceso con el mismo dedo para cada captura.", "Error al guardar la huella.", JOptionPane.ERROR_MESSAGE);
	    start();
	    break;
	}
	     }
}

 public  DPFPFeatureSet extraerCaracteristicas(DPFPSample sample, DPFPDataPurpose purpose){
     DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
     try {
      return extractor.createFeatureSet(sample, purpose);
     } catch (DPFPImageQualityException e) {
      return null;
     }
}

  public  Image CrearImagenHuella(DPFPSample sample) {
	return DPFPGlobal.getSampleConversionFactory().createImage(sample);
}

  public void DibujarHuella(Image image) {
        lblImagenHuella.setIcon(new ImageIcon(
        image.getScaledInstance(lblImagenHuella.getWidth(), lblImagenHuella.getHeight(), Image.SCALE_DEFAULT)));
        repaint();
 }

public  void EstadoHuellas(){
	//EnviarTexto("Muestra de Huellas Necesarias para Guardar Template "+ Reclutador.getFeaturesNeeded());
        labelListo.setEnabled(false);
        
        if(Reclutador.getFeaturesNeeded()==4)
        {
            labelCapturando1.setEnabled(false);
            labelCapturando2.setEnabled(false);
            labelCapturando3.setEnabled(false);
        }
        
        if(Reclutador.getFeaturesNeeded()==3)
        {
            labelCapturando1.setEnabled(true);
            labelCapturando2.setEnabled(false);
            labelCapturando3.setEnabled(false);
        }
        
        if(Reclutador.getFeaturesNeeded()==2)
        {
            labelCapturando1.setEnabled(true);
            labelCapturando2.setEnabled(true);
            labelCapturando3.setEnabled(false);
        }
        
        if(Reclutador.getFeaturesNeeded()==1)
        {
            labelCapturando1.setEnabled(true);
            labelCapturando2.setEnabled(true);
            labelCapturando3.setEnabled(true);
        }
}

public void EnviarTexto(String string) {
        txtArea.append(string + "\n");
}

//Se inicializa el uso del lector de huellas.
public  void start(){
	Lector.startCapture();
	//EnviarTexto("Lector de huella dactilar listo.");
//        EnviarTexto("Se necesitan tomar 4 muestras de su huella.");
//        EnviarTexto("Para elegir la de mejor calidad y guardarla.\n");
//        labelVerde.setVisible(false);
}

//Se desactiva el uso del lector de huellas.
public  void stop(){
        Lector.stopCapture();
        EnviarTexto("Lector de huella dactilar desactivado. ");
//        labelVerde.setVisible(false);
//        labelRojo.setVisible(true);
}

public void limpiarTextFields()
{
    txtNombre.setText(null);
    txtApellidos.setText(null);
}

    public DPFPTemplate getTemplate() {
        return template;
    }

    public void setTemplate(DPFPTemplate template) {
        DPFPTemplate old = this.template;
	this.template = template;
	firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }

    //Creamos la instancia 'con' de tipo ConexionBD
    ConexionBD con = new ConexionBD();
    
 /*
  * Guarda los datos de la huella digital actual en la base de datos
  */
    
    public void guardarHuella1(){
     //Obtiene los datos del template de la huella actual
     ByteArrayInputStream datosHuella = new ByteArrayInputStream(template.serialize());
     Integer tama√±oHuella = template.serialize().length;
     nombre = txtNombre.getText().toString();
     apellidos = txtApellidos.getText().toString();

     //Pregunta el nombre de la persona a la cual corresponde dicha huella
     //String nombre = JOptionPane.showInputDialog("Nombre:");
        try {
        ConexionBD con = new ConexionBD();
        //Establece los valores para la sentencia SQL
        Connection c = con.conectar(); //Establecemos la conexion con la BD
               //Guardamos la huella dactilar en la BD con un id auto incremental.
               try (PreparedStatement guardarStmt = c.prepareStatement("INSERT INTO Profesor(HuellaProfesor, Nombre, Apellidos) values(?,?,?)",
                //Con la sig. linea, la clave primaria de la tabla se autogenera al hacer el INSERT
                PreparedStatement.RETURN_GENERATED_KEYS)) {

                       //guardarStmt.setString(1,nombre);
                       guardarStmt.setBinaryStream(1, datosHuella, tama√±oHuella);
                       guardarStmt.setString(2, nombre);
                       guardarStmt.setString(3, apellidos);
                       //Ejecuta la sentencia
                       guardarStmt.execute();
            }

        JOptionPane.showMessageDialog(RegistroProfesor.this,"Se ha guardado la huella con √©xito. \nPresione Aceptar para continuar.");
        con.desconectar();
   //     ventanaNueva.limpiarTextFields();
        btnGuardar.setEnabled(false);
   //     btnRegistro.setEnabled(false);
   //     btnVerificar.grabFocus();
        } catch (SQLException ex) {
        //Si ocurre un error lo indica en la consola
        System.err.println("Error al guardar los datos de la huella."+ex);
        }finally{
        con.desconectar();
        }
   }
    
   public void guardarSinHuella()
   {
       //Obtiene los datos del template de la huella actual
     //ByteArrayInputStream datosHuella = new ByteArrayInputStream(template.serialize());
     //Integer tama√±oHuella = template.serialize().length;
     nombre = txtNombre.getText().toString();
     apellidos = txtApellidos.getText().toString();

     //Pregunta el nombre de la persona a la cual corresponde dicha huella
     //String nombre = JOptionPane.showInputDialog("Nombre:");
        try {
        ConexionBD con = new ConexionBD();
        //Establece los valores para la sentencia SQL
        Connection c = con.conectar(); //Establecemos la conexion con la BD
               //Guardamos la huella dactilar en la BD con un id auto incremental.
               try (PreparedStatement guardarStmt = c.prepareStatement("INSERT INTO Profesor(Nombre, Apellidos) values(?,?)",
                //Con la sig. linea, la clave primaria de la tabla se autogenera al hacer el INSERT
                PreparedStatement.RETURN_GENERATED_KEYS)) {

                       //guardarStmt.setString(1,nombre);
                       //guardarStmt.setBinaryStream(1, datosHuella, tama√±oHuella);
                       guardarStmt.setString(1, nombre);
                       guardarStmt.setString(2, apellidos);
                       //Ejecuta la sentencia
                       guardarStmt.execute();
            }

        JOptionPane.showMessageDialog(RegistroProfesor.this,"Se ha guardado la huella con √©xito. \nPresione Aceptar para continuar.");
        con.desconectar();
   //     ventanaNueva.limpiarTextFields();
        btnGuardar.setEnabled(false);
   //     btnRegistro.setEnabled(false);
   //     btnVerificar.grabFocus();
        } catch (SQLException ex) {
        //Si ocurre un error lo indica en la consola
        System.err.println("Error al guardar los datos de la huella."+ex);
        }finally{
        con.desconectar();
        }
   }
    

/**
* Verifica la huella digital actual contra otra en la base de datos
*/
 public void verificarHuella(String nom) {
    try {
    //Establece los valores para la sentencia SQL
    Connection c = con.conectar();
    //Obtiene la plantilla correspondiente a la persona indicada
    PreparedStatement verificarStmt = c.prepareStatement("SELECT huehuella FROM somhue WHERE huenombre = ?");
    verificarStmt.setString(1,nom);
    ResultSet rs = verificarStmt.executeQuery();

    //Si se encuentra el nombre en la base de datos
    if (rs.next()){
    //Lee la plantilla de la base de datos
    byte templateBuffer[] = rs.getBytes("huehuella");
    //Crea una nueva plantilla a partir de la guardada en la base de datos
    DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
    //Envia la plantilla creada al objeto contendor de Template del componente de huella digital
    setTemplate(referenceTemplate);

    // Compara las caracteriticas de la huella recientemente capturda con la
    // plantilla guardada al usuario especifico en la base de datos
    DPFPVerificationResult result = Verificador.verify(featuresverificacion, getTemplate());

    //compara las plantilas (actual vs bd)
    if (result.isVerified())
    JOptionPane.showMessageDialog(null, "Las huella capturada coinciden con la de "+nom,"Verificacion de Huella", JOptionPane.INFORMATION_MESSAGE);
    else
    JOptionPane.showMessageDialog(null, "No corresponde la huella con "+nom, "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);

    //Si no encuentra alguna huella correspondiente al nombre lo indica con un mensaje
    } else {
    JOptionPane.showMessageDialog(null, "No existe un registro de huella para "+nom, "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);
    }
    } catch (SQLException e) {
    //Si ocurre un error lo indica en la consola
    System.err.println("Error al verificar los datos de la huella.");
    }finally{
       con.desconectar();
    }
   }

 /**
  * Identifica a una persona registrada por medio de su huella digital
  */
  public void identificarHuella() throws IOException{
      
    //limpiarJTextArea();
      
     try {
       
         //Encabezados de la tabla
        String [] titulos = {"Id", "Nombre", "Apellidos", "Edad", "Sexo", "Estatura", "Peso", "Alergias", "TipoSangre", "FechaNacimiento", "Tel√©fono"};
        String [] registros = new String[11];
         
       //Establece los valores para la sentencia SQL
       Connection c = con.conectar();

       PreparedStatement identificarStmt;
       identificarStmt = c.prepareStatement("SELECT huenombre, huehuella FROM somhue");
       //Query
       ResultSet rs = identificarStmt.executeQuery();

       //Si se encuentra el nombre en la base de datos
       while(rs.next())
       {
        //Lee la plantilla de la base de datos
        byte templateBuffer[] = rs.getBytes("huehuella");
        String nombre = rs.getString("huenombre");
        //Crea una nueva plantilla a partir de la guardada en la base de datos
        DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
        //Envia la plantilla creada al objeto contendor de Template del componente de huella digital
        setTemplate(referenceTemplate);

        // Compara las caracteriticas de la huella recientemente capturda con la
        // alguna plantilla guardada en la base de datos que coincide con ese tipo
        DPFPVerificationResult result = Verificador.verify(featuresverificacion, getTemplate());

        //compara las plantilas (actual vs bd)
        //Si encuentra correspondencia dibuja el mapa
        //e indica el nombre de la persona que coincidi√≥.
            if (result.isVerified())
            {
                
                            //crea la imagen de los datos guardado de las huellas guardadas en la base de datos
             //JOptionPane.showMessageDialog(null, "La huella capturada es de "+nombre,"Verificacion de Huella", JOptionPane.INFORMATION_MESSAGE);
             //cargar();
             //String sql = "SELECT * FROM cliente WHERE nom_cli LIKE '%" +valor+"%";
                 //String sql = "SELECT * FROM somhue WHERE huehuella = "+'"'+referenceTemplate+'"';
                 String sql =  "SELECT * FROM somhue WHERE huenombre = "+'"'+nombre+'"';
//                 btnConsulta.setEnabled(true);
//                 btnHistorial.setEnabled(true);
                 //Creamos nuestro objeto para la tabla que muestra los datos de la BD
                 //model = new DefaultTableModel(null, titulos);

                 ConexionBD cc = new ConexionBD();
                 Connection cn = cc.conectar();

                 Statement st;
                 limpiarJTextArea();
                 ResultSet rs1=null;
                 try {
                     st = cn.createStatement();
                     rs1 = st.executeQuery(sql);
                     } catch (SQLException ex) {
                     JOptionPane.showMessageDialog(null, ex);
                 }
                     //Inicializamos variable para imprimir en el textArea
                     String imprime = "";
                     imprime = "Nombre(s): ";
                 
                     while(rs1.next())
                     {
     //                    registros[0] = rs1.getString("hueid");
     //                    registros[1] = rs1.getString("huenombre");
     //                    registros[2] = rs1.getString("hueapellidos");
     //                    registros[3] = rs1.getString("hueedad");
     //                    registros[4] = rs1.getString("huesexo");
     //                    registros[5] = rs1.getString("hueestatura");
     //                    registros[6] = rs1.getString("huepeso");
     //                    registros[7] = rs1.getString("huealergias");
     //                    registros[8] = rs1.getString("huetiposangre");
     //                    registros[9] = rs1.getString("huefecha");
     //                    registros[10] = rs1.getString("huetelefono");
                           imprime+= rs1.getString("huenombre")+"\n";
                           imprime+= "Apellidos: ";
                           imprime+= rs1.getString("hueapellidos")+"\n";
                           imprime+= "NSS: ";
                           imprime+= rs1.getString("hueedad")+"\n";
                           imprime+= "G√©nero: ";
                           imprime+= rs1.getString("huesexo")+"\n";
                           imprime+= "Estatura: ";
                           imprime+= rs1.getString("hueestatura")+"\n";
                           imprime+= "Peso: ";
                           imprime+= rs1.getString("huepeso")+"\n";
                           imprime+= "Alergias: ";
                           imprime+= rs1.getString("huealergias")+"\n";
                           imprime+= "Tipo de Sangre: ";
                           imprime+= rs1.getString("huetiposangre")+"\n";
                           imprime+= "Fecha de Nacimiento: ";
                           imprime+= rs1.getString("huefecha")+"\n";
                           imprime+= "Tel√©fono de emergencia (familiar): ";
                           imprime+= rs1.getString("huetelefono")+"\n";
                           //this.id=rs1.getString("hueid");
                     }
//                     ventanaConsulta.setId(this.id);
//                     ventanaPaciente.setId(this.id);
                     //System.out.println("Id en interfaz: "+this.id);
                     //Mandamos la informaci√≥n de la base de datos al JTextArea
//                     txtAreaInfoPaciente.setText(imprime);

                 
             return;
         }
       }//fin while
       //Si no encuentra alguna huella correspondiente al nombre lo indica con un mensaje
       JOptionPane.showMessageDialog(null, "No existe ning√∫n registro que coincida con la huella", "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);
       setTemplate(null);
       } catch (SQLException e) {
       //Si ocurre un error lo indica en la consola
       System.err.println("Error al identificar huella dactilar."+e.getMessage());
       }finally{
       con.desconectar();
       }
   }
  
  DefaultTableModel model;
    
    void cargar()
    {
        //Encabezados de la tabla
        String [] titulos = {"Id", "Nombre", "Apellidos", "Edad", "Sexo", "Estatura", "Peso", "Alergias", "TipoSangre", "FechaNacimiento", "Tel√©fono"};
        String [] registros = new String[11];
        
        //String sql = "SELECT * FROM cliente WHERE nom_cli LIKE '%" +valor+"%";
        String sql = "SELECT * FROM somhue";
        
        //Creamos nuestro objeto para la tabla que muestra los datos de la BD
        model = new DefaultTableModel(null, titulos);
        
        ConexionBD cc = new ConexionBD();
        Connection cn = cc.conectar();
        
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            
            while(rs.next())
            {
                registros[0] = rs.getString("hueid");
                registros[1] = rs.getString("huenombre");
                registros[2] = rs.getString("hueapellidos");
                registros[3] = rs.getString("hueedad");
                registros[4] = rs.getString("huesexo");
                registros[5] = rs.getString("hueestatura");
                registros[6] = rs.getString("huepeso");
                registros[7] = rs.getString("huealergias");
                registros[8] = rs.getString("huetiposangre");
                registros[9] = rs.getString("huefecha");
                registros[10] = rs.getString("huetelefono");
                model.addRow(registros);
            }
            //tablaDatos.setModel(model);
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistroProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistroProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistroProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistroProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new RegistroProfesor().setVisible(true);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(RegistroProfesor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCapturando1;
    private javax.swing.JLabel labelCapturando2;
    private javax.swing.JLabel labelCapturando3;
    private javax.swing.JLabel labelConectado;
    private javax.swing.JLabel labelDesconectado;
    private javax.swing.JLabel labelListo;
    private javax.swing.JLabel lblImagenHuella;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
